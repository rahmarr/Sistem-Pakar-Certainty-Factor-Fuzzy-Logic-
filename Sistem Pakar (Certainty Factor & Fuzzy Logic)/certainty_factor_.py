# -*- coding: utf-8 -*-
"""certainty factor .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cXxD1t8rznCR3sEMOHyBQdhqjL7-GVpa
"""

gejala_user = {
    "demam": 0.7,
    "batuk": 0.5,
    "sakit_tenggorokan": 0.6
}

pengetahuan = {
    "flu": {
        "demam": 0.8,
        "batuk": 0.7,
        "sakit_tenggorokan": 0.6
    }
}

def hitung_cf(gejala_user, pengetahuan_pakar):
    cf_total = 0
    first = True
    for gejala, cf_user in gejala_user.items():
        if gejala in pengetahuan_pakar:
            cf_pakar = pengetahuan_pakar[gejala]
            cf = cf_user * cf_pakar
            if first:
                cf_total = cf
                first = False
            else:
                cf_total = cf_total + cf * (1 - cf_total)
    return cf_total

cf_flu = hitung_cf(gejala_user, pengetahuan["flu"])
print(f"CF diagnosis Flu: {cf_flu:.2f}")

gejala_user = {
    "nyeri_sendi": 0.8,
    "bengkak_sendi": 0.7,
    "kaku_sendi_pagi": 0.9,
    "demam_ringan": 0.3
}

pengetahuan = {
    "rheumatoid_arthritis": {
        "nyeri_sendi": 0.9,
        "bengkak_sendi": 0.8,
        "kaku_sendi_pagi": 0.9,
        "demam_ringan": 0.4
    },
    "osteoarthritis": {
        "nyeri_sendi": 0.8,
        "bengkak_sendi": 0.6,
        "kaku_sendi_pagi": 0.5
    }
}

def hitung_cf(gejala_user, pengetahuan_pakar):
    cf_total = 0
    first = True
    for gejala, cf_user in gejala_user.items():
        if gejala in pengetahuan_pakar:
            cf_pakar = pengetahuan_pakar[gejala]
            cf = cf_user * cf_pakar
            if first:
                cf_total = cf
                first = False
            else:
                cf_total = cf_total + cf * (1 - cf_total)
    return cf_total

# Mendiagnosa dua penyakit berdasarkan gejala yang sama
for penyakit in pengetahuan:
    cf_result = hitung_cf(gejala_user, pengetahuan[penyakit])
    print(f"CF diagnosis {penyakit}: {cf_result:.2f}")

# Example 4: Diabetes Diagnosis with Weighted Symptoms
gejala_user = {
    "sering_haus": 0.8,
    "sering_buang_air_kecil": 0.9,
    "penurunan_berat_badan": 0.6,
    "luka_lambat_sembuh": 0.7,
    "penglihatan_kabur": 0.5
}

# Pengetahuan pakar dengan bobot gejala
pengetahuan = {
    "diabetes_tipe1": {
        "sering_haus": 0.9,
        "sering_buang_air_kecil": 0.9,
        "penurunan_berat_badan": 0.8,
        "luka_lambat_sembuh": 0.5
    },
    "diabetes_tipe2": {
        "sering_haus": 0.7,
        "sering_buang_air_kecil": 0.7,
        "penurunan_berat_badan": 0.5,
        "luka_lambat_sembuh": 0.8,
        "penglihatan_kabur": 0.6
    }
}

# Bobot kepentingan gejala (1-5)
bobot_gejala = {
    "sering_haus": 4,
    "sering_buang_air_kecil": 4,
    "penurunan_berat_badan": 3,
    "luka_lambat_sembuh": 5,
    "penglihatan_kabur": 2
}

def hitung_cf_weighted(gejala_user, pengetahuan_pakar, bobot):
    cf_total = 0
    first = True
    total_bobot = 0

    for gejala, cf_user in gejala_user.items():
        if gejala in pengetahuan_pakar and gejala in bobot:
            cf_pakar = pengetahuan_pakar[gejala]
            gejala_weight = bobot[gejala] / 5  # Normalisasi bobot (1-5) -> (0.2-1.0)
            cf = cf_user * cf_pakar * gejala_weight

            if first:
                cf_total = cf
                first = False
            else:
                cf_total = cf_total + cf * (1 - cf_total)

            total_bobot += gejala_weight

    # Normalisasi hasil berdasarkan total bobot
    if total_bobot > 0:
        cf_total = cf_total / total_bobot * len([g for g in gejala_user if g in pengetahuan_pakar])

    return cf_total

for penyakit in pengetahuan:
    cf_result = hitung_cf_weighted(gejala_user, pengetahuan[penyakit], bobot_gejala)
    print(f"CF diagnosis {penyakit}: {cf_result:.2f}")

"""Tugas Sistem Pakar (Certainty Factor)"""

# Example 4: Diabetes Diagnosis with Weighted Symptoms
# Menambahkan 5 gejala baru termasuk 'demam'

gejala_user = {
    "sering_haus": 0.8,
    "sering_buang_air_kecil": 0.9,
    "penurunan_berat_badan": 0.6,
    "luka_lambat_sembuh": 0.7,
    "penglihatan_kabur": 0.5,
    "demam": 0.2,                      # Gejala baru dengan nilai rendah
    "mudah_lelah": 0.7,               # Gejala baru
    "gatal_gatal": 0.6,               # Gejala baru
    "kesemutan": 0.5,                 # Gejala baru
    "infeksi_kulit": 0.4              # Gejala baru
}

# Menambahkan pengetahuan pakar untuk gejala baru
pengetahuan = {
    "diabetes_tipe1": {
        "sering_haus": 0.9,
        "sering_buang_air_kecil": 0.9,
        "penurunan_berat_badan": 0.8,
        "luka_lambat_sembuh": 0.5,
        "demam": 0.3,
        "mudah_lelah": 0.6,
        "gatal_gatal": 0.4
    },
    "diabetes_tipe2": {
        "sering_haus": 0.7,
        "sering_buang_air_kecil": 0.7,
        "penurunan_berat_badan": 0.5,
        "luka_lambat_sembuh": 0.8,
        "penglihatan_kabur": 0.6,
        "demam": 0.4,
        "kesemutan": 0.5,
        "infeksi_kulit": 0.6
    }
}

# Menambahkan bobot untuk gejala baru
bobot_gejala = {
    "sering_haus": 4,
    "sering_buang_air_kecil": 4,
    "penurunan_berat_badan": 3,
    "luka_lambat_sembuh": 5,
    "penglihatan_kabur": 2,
    "demam": 2,
    "mudah_lelah": 3,
    "gatal_gatal": 3,
    "kesemutan": 2,
    "infeksi_kulit": 3
}

# Fungsi tetap sama
def hitung_cf_weighted(gejala_user, pengetahuan_pakar, bobot):
    cf_total = 0
    first = True
    total_bobot = 0

    for gejala, cf_user in gejala_user.items():
        if gejala in pengetahuan_pakar and gejala in bobot:
            cf_pakar = pengetahuan_pakar[gejala]
            gejala_weight = bobot[gejala] / 5  # Normalisasi bobot (1-5) -> (0.2-1.0)
            cf = cf_user * cf_pakar * gejala_weight

            if first:
                cf_total = cf
                first = False
            else:
                cf_total = cf_total + cf * (1 - cf_total)

            total_bobot += gejala_weight

    # Normalisasi hasil berdasarkan total bobot
    if total_bobot > 0:
        cf_total = cf_total / total_bobot * len([g for g in gejala_user if g in pengetahuan_pakar])

    return cf_total

# Menampilkan hasil per penyakit
for penyakit in pengetahuan:
    cf_result = hitung_cf_weighted(gejala_user, pengetahuan[penyakit], bobot_gejala)
    print(f"CF diagnosis {penyakit}: {cf_result:.2f}")

"""Penjelasan Perubahan:

1. Gejala "demam" ditambahkan dengan nilai 0.2. Karena nilai CF user rendah dan bobot juga kecil (2), kontribusinya ke CF total jadi kecil.
2. Meski "demam" ditambahkan, ia tidak terlalu mempengaruhi hasil akhir karena nilainya kecil. Namun tetap menambah variasi dan informasi dalam proses diagnosis.
3. Penambahan gejala baru lainnya seperti "mudah_lelah", "gatal_gatal", dll. dapat membantu meningkatkan akurasi diagnosis bila bobot dan CF-nya signifikan.
4. Jika nilai "demam" dinaikkan ke 0.8 misalnya, maka kontribusinya akan lebih terasa dan bisa menggeser diagnosis tergantung relasi ke penyakit tertentu.


"""